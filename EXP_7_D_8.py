# -*- coding: utf-8 -*-
"""Perform gray level operations images.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Aj4EzGcqRA3HBUxUlrgfNxWpcGUa_vpH
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Load the input grayscale image
image = cv2.imread('/content/ex1_1.png', cv2.IMREAD_GRAYSCALE)

# Check if the image is loaded successfully
if image is None:
    print("Error: Could not open or find the image at the specified path.")
else:
    # Function to perform image negation
    def image_negation(input_image):
        negated_image = 255 - input_image
        return negated_image

    # Function to perform image thresholding
    def image_thresholding(input_image, threshold_value):
        _, thresholded_image = cv2.threshold(input_image, threshold_value, 255, cv2.THRESH_BINARY)
        return thresholded_image

    # Function to perform image gamma correction
    def image_gamma_correction(input_image, gamma):
        gamma_corrected_image = np.power(input_image / 255.0, gamma) * 255.0
        gamma_corrected_image = np.uint8(gamma_corrected_image)
        return gamma_corrected_image

    # Perform gray level operations
    negated_image = image_negation(image)
    thresholded_image = image_thresholding(image, 110)
    gamma_corrected_image = image_gamma_correction(image, 1.10)

    # Display the original and processed images
    cv2_imshow(image)
    cv2_imshow(negated_image)
    cv2_imshow(thresholded_image)
    cv2_imshow(gamma_corrected_image)

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Load the input grayscale image
image = cv2.imread('/content/ex1_4.png', cv2.IMREAD_GRAYSCALE)

# Check if the image is loaded successfully
if image is None:
    print("Error: Could not open or find the image at the specified path.")
else:
    # Function to perform image negation
    def image_negation(input_image):
        negated_image = 255 - input_image
        return negated_image

    # Function to perform image thresholding
    def image_thresholding(input_image, threshold_value):
        _, thresholded_image = cv2.threshold(input_image, threshold_value, 255, cv2.THRESH_BINARY)
        return thresholded_image

    # Function to perform image gamma correction
    def image_gamma_correction(input_image, gamma):
        gamma_corrected_image = np.power(input_image / 200.0, gamma) * 255.0
        gamma_corrected_image = np.uint8(gamma_corrected_image)
        return gamma_corrected_image

    # Perform gray level operations
    negated_image = image_negation(image)
    thresholded_image = image_thresholding(image, 22)
    gamma_corrected_image = image_gamma_correction(image, -1)

    # Display the original and processed images
    cv2_imshow(image)
    cv2_imshow(negated_image)
    cv2_imshow(thresholded_image)
    cv2_imshow(gamma_corrected_image)

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Load the input grayscale image
image = cv2.imread('/content/ex1_2.png', cv2.IMREAD_GRAYSCALE)

# Check if the image is loaded successfully
if image is None:
    print("Error: Could not open or find the image at the specified path.")
else:
    # Function to perform image negation
    def image_negation(input_image):
        negated_image = 255 - input_image
        return negated_image

    # Function to perform image thresholding
    def image_thresholding(input_image, threshold_value):
        _, thresholded_image = cv2.threshold(input_image, threshold_value, 255, cv2.THRESH_BINARY)
        return thresholded_image

    # Function to perform image gamma correction
    def image_gamma_correction(input_image, gamma):
        gamma_corrected_image = np.power(input_image / 200.0, gamma) * 255.0
        gamma_corrected_image = np.uint8(gamma_corrected_image)
        return gamma_corrected_image

    # Perform gray level operations
    negated_image = image_negation(image)
    thresholded_image = image_thresholding(image, 22)
    gamma_corrected_image = image_gamma_correction(image, -1)

    # Display the original and processed images
    cv2_imshow(image)
    cv2_imshow(negated_image)
    cv2_imshow(thresholded_image)
    cv2_imshow(gamma_corrected_image)

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Load the input grayscale image
image = cv2.imread('/content/ex1_3.png', cv2.IMREAD_GRAYSCALE)

# Check if the image is loaded successfully
if image is None:
    print("Error: Could not open or find the image at the specified path.")
else:
    # Function to perform image negation
    def image_negation(input_image):
        negated_image = 255 - input_image
        return negated_image

    # Function to perform image thresholding
    def image_thresholding(input_image, threshold_value):
        _, thresholded_image = cv2.threshold(input_image, threshold_value, 255, cv2.THRESH_BINARY)
        return thresholded_image

    # Function to perform image gamma correction
    def image_gamma_correction(input_image, gamma):
        gamma_corrected_image = np.power(input_image / 200.0, gamma) * 255.0
        gamma_corrected_image = np.uint8(gamma_corrected_image)
        return gamma_corrected_image

    # Perform gray level operations
    negated_image = image_negation(image)
    thresholded_image = image_thresholding(image, 22)
    gamma_corrected_image = image_gamma_correction(image, -1)

    # Display the original and processed images
    cv2_imshow(image)
    cv2_imshow(negated_image)
    cv2_imshow(thresholded_image)
    cv2_imshow(gamma_corrected_image)

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Load the input grayscale image
image = cv2.imread('/content/ex1_5.png', cv2.IMREAD_GRAYSCALE)

# Check if the image is loaded successfully
if image is None:
    print("Error: Could not open or find the image at the specified path.")
else:
    # Function to perform image negation
    def image_negation(input_image):
        negated_image = 255 - input_image
        return negated_image

    # Function to perform image thresholding
    def image_thresholding(input_image, threshold_value):
        _, thresholded_image = cv2.threshold(input_image, threshold_value, 255, cv2.THRESH_BINARY)
        return thresholded_image

    # Function to perform image gamma correction
    def image_gamma_correction(input_image, gamma):
        gamma_corrected_image = np.power(input_image / 200.0, gamma) * 255.0
        gamma_corrected_image = np.uint8(gamma_corrected_image)
        return gamma_corrected_image

    # Perform gray level operations
    negated_image = image_negation(image)
    thresholded_image = image_thresholding(image, 22)
    gamma_corrected_image = image_gamma_correction(image, -1)

    # Display the original and processed images
    cv2_imshow(image)
    cv2_imshow(negated_image)
    cv2_imshow(thresholded_image)
    cv2_imshow(gamma_corrected_image)